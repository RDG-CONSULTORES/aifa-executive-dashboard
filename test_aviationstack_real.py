#!/usr/bin/env python3
"""
Prueba completa de AviationStack API con endpoints reales
Usando API key activa: 59f5d7300a3c8236dc29e095fa6ab923
"""

import sys
import os
sys.path.append('scripts')

from real_data_connector import AviationStackConnector
import json
from datetime import datetime

def test_aviationstack_complete():
    """
    Prueba completa de todos los endpoints de AviationStack
    """
    
    print("üß™ PRUEBA COMPLETA AVIATIONSTACK API")
    print("="*60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîë API Key: 59f5d7300a3c8236dc29e095fa6ab923")
    print("")
    
    # Inicializar conector
    connector = AviationStackConnector()
    
    # Test 1: Conexi√≥n b√°sica
    print("1Ô∏è‚É£ PROBANDO CONEXI√ìN B√ÅSICA")
    print("-" * 40)
    connection = connector.test_connection()
    print(f"Status: {connection.get('status', 'ERROR')}")
    if connection.get('api_activa'):
        print(f"‚úÖ API Activa: {connection['requests_disponibles']}")
        print(f"üìä Total aeropuertos: {connection.get('total_aeropuertos', 'N/A')}")
    else:
        print(f"‚ùå Error: {connection.get('error_msg', 'Desconocido')}")
        return False
    
    print("")
    
    # Test 2: Informaci√≥n del aeropuerto AIFA
    print("2Ô∏è‚É£ INFORMACI√ìN AEROPUERTO AIFA (NLU)")
    print("-" * 40)
    airport_info = connector.get_airport_info("NLU")
    
    if 'error' not in airport_info:
        print(f"‚úÖ Aeropuerto: {airport_info['nombre']}")
        print(f"üìç IATA: {airport_info['iata']} | ICAO: {airport_info['icao']}")
        print(f"üåç Coordenadas: {airport_info['latitud']}, {airport_info['longitud']}")
        print(f"üèôÔ∏è Ciudad: {airport_info['ciudad']} | Pa√≠s: {airport_info['pais']}")
        print(f"‚è∞ Zona horaria: {airport_info['zona_horaria']}")
    else:
        print(f"‚ö†Ô∏è Error obteniendo info aeropuerto: {airport_info['error']}")
    
    print("")
    
    # Test 3: Vuelos de salida AIFA
    print("3Ô∏è‚É£ VUELOS SALIDA DESDE AIFA")
    print("-" * 40)
    departures = connector.get_real_flights("NLU", "departure", 10)
    
    if departures.get('success'):
        flights = departures.get('flights', [])
        print(f"‚úÖ Encontrados {len(flights)} vuelos de salida")
        
        for i, flight in enumerate(flights[:3]):
            flight_num = flight.get('flight', {}).get('iata', 'N/A')
            airline = flight.get('airline', {}).get('name', 'N/A')
            destination = flight.get('arrival', {}).get('airport', 'N/A')
            status = flight.get('flight_status', 'N/A')
            
            print(f"   {i+1}. {flight_num} ({airline}) ‚Üí {destination} [{status}]")
            
    else:
        print(f"‚ö†Ô∏è No se encontraron vuelos de salida")
        print(f"   C√≥digo: {departures.get('error_code', 'N/A')}")
    
    print("")
    
    # Test 4: Vuelos de llegada AIFA  
    print("4Ô∏è‚É£ VUELOS LLEGADA A AIFA")
    print("-" * 40)
    arrivals = connector.get_real_flights("NLU", "arrival", 10)
    
    if arrivals.get('success'):
        flights = arrivals.get('flights', [])
        print(f"‚úÖ Encontrados {len(flights)} vuelos de llegada")
        
        for i, flight in enumerate(flights[:3]):
            flight_num = flight.get('flight', {}).get('iata', 'N/A')
            airline = flight.get('airline', {}).get('name', 'N/A')
            origin = flight.get('departure', {}).get('airport', 'N/A')
            status = flight.get('flight_status', 'N/A')
            
            print(f"   {i+1}. {flight_num} ({airline}) ‚Üê {origin} [{status}]")
            
    else:
        print(f"‚ö†Ô∏è No se encontraron vuelos de llegada")
        print(f"   C√≥digo: {arrivals.get('error_code', 'N/A')}")
    
    print("")
    
    # Test 5: Resumen completo de vuelos
    print("5Ô∏è‚É£ RESUMEN OPERACIONES AIFA")
    print("-" * 40)
    summary = connector.get_flights_summary("NLU")
    
    if summary.get('precision') == 'REAL':
        print(f"‚úÖ Datos REALES obtenidos de AviationStack")
        print(f"üìä Total operaciones: {summary['total_operaciones_dia']}")
        print(f"üõ´ Salidas: {summary['salidas_reales']}")  
        print(f"üõ¨ Llegadas: {summary['llegadas_reales']}")
        print(f"üéØ Destinos principales: {', '.join(summary['principales_destinos'])}")
        print(f"‚úàÔ∏è Aerol√≠neas activas: {', '.join(summary['aerolineas_activas'])}")
    else:
        print(f"‚ö†Ô∏è Usando datos simulados")
        print(f"üìä Operaciones estimadas: {summary.get('total_operaciones_estimadas_dia', 'N/A')}")
        print(f"üìù Nota: {summary.get('nota', 'N/A')}")
    
    print("")
    
    # Test 6: Estad√≠sticas completas del aeropuerto
    print("6Ô∏è‚É£ ESTAD√çSTICAS COMPLETAS AIFA")  
    print("-" * 40)
    stats = connector.get_airport_statistics("NLU")
    
    if 'error' not in stats:
        print(f"‚úÖ Estad√≠sticas generadas exitosamente")
        activity = stats.get('actividad_reciente', {})
        print(f"üìà Actividad reciente:")
        print(f"   Salidas encontradas: {activity.get('salidas_encontradas', 0)}")
        print(f"   Llegadas encontradas: {activity.get('llegadas_encontradas', 0)}")
        print(f"   Success rate: {activity.get('success_rate', 'N/A')}")
    else:
        print(f"‚ö†Ô∏è Error en estad√≠sticas: {stats.get('error', 'N/A')}")
    
    print("")
    print("="*60)
    print("‚úÖ PRUEBA AVIATIONSTACK COMPLETADA")
    
    # Resumen final
    total_tests = 6
    passed_tests = 0
    
    if connection.get('api_activa'): passed_tests += 1
    if 'error' not in airport_info: passed_tests += 1  
    if departures.get('success'): passed_tests += 1
    if arrivals.get('success'): passed_tests += 1
    if summary.get('precision') == 'REAL': passed_tests += 1
    if 'error' not in stats: passed_tests += 1
    
    success_rate = (passed_tests / total_tests) * 100
    print(f"üìä Success Rate: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
    
    if success_rate >= 50:
        print("üéâ API AVIATIONSTACK FUNCIONAL PARA PRODUCCI√ìN")
        return True
    else:
        print("‚ö†Ô∏è API CON LIMITACIONES - USAR FALLBACKS")
        return False

if __name__ == "__main__":
    test_aviationstack_complete()